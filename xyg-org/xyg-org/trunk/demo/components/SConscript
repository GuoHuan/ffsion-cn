import sys, os, string

platform = sys.platform

##try:
##    gecko_sdk = os.environ['GECKO_SDK']
##    if gecko_sdk[-1] != os.sep: gecko_sdk += os.sep
##except:
##    print "Please set environment variable GECKO_SDK first."
##    sys.exit(1)
xulrunner_sdk = '/home/guohuan/tmp/xulrunner/1.9b3/xulrunner-sdk/'
xyglib_path = '../../src/'
gecko_sdk = xulrunner_sdk + 'sdk/'
xpidl = gecko_sdk + 'bin/xpidl' 
gecko_idl = gecko_sdk + 'idl'

# Create two builders to create xpt and header files from idl.
bxpt = Builder(action = xpidl + ' -w -m typelib -Icomponents -I' + gecko_idl + ' -e $TARGET $SOURCE', suffix = '.xpt', src_suffix = '.idl')
bhdr = Builder(action = xpidl + '  -w -m header -Icomponents -I' + gecko_idl + ' -e $TARGET $SOURCE', suffix = '.h',   src_suffix = '.idl')

# Create environment object for build
env = Environment(
    CPPPATH = [gecko_sdk + 'include', 
                xulrunner_sdk + 'include' , 
                xulrunner_sdk + 'include/xpcom' ,
                xyglib_path + 'include'
                ],
    LIBPATH = [gecko_sdk + 'lib' , 
               xyglib_path 
                ],
    LIBS = ['xpcomglue',
            'nspr4',
            'plds4' , 
            'xpcomglue_s.a',
            'xul',
           'xyg'
            ],
    ENV = os.environ)

env.AppendENVPath('PATH', gecko_sdk + 'bin')
env.Append(BUILDERS = {'MozXPT' : bxpt, 'MozHeader' : bhdr})

# Add additional param for different platforms
if platform == 'linux2':
    env.AppendUnique(
        CXXFLAGS = [
                    '-include', 
                    'xpcom-config.h',
                    '-Wall', 
#'-O2',
                    '-fno-rtti', 
                    '-fno-exceptions',
                    '-Wconversion',
                    '-Wpointer-arith', 
                    '-Wcast-align',
                    '-Woverloaded-virtual',
                    '-Wsynth',
                    '-fshort-wchar',
                    '-Wno-ctor-dtor-privacy',
                    '-Wno-non-virtual-dtor',
                    '-Wno-long-long',
                    '-pedantic',
                    '-fshort-wchar',
                    '-pthread', 
                    '-pipe'
                    ])

# Create headers and xpt files from idl
xpts = [env.MozXPT('IFetionCom')]
headers = [env.MozHeader('IFetionCom')]

parts = []
if platform == 'linux2':
    parts.extend([
            'fetionCom.cpp',
            'fetionComModule.cpp',
            ])

ff_xpcom=env.SharedLibrary('fetionCom', parts)

Default([xpts, headers, ff_xpcom])
